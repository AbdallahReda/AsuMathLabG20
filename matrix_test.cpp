#include "matrix.h" // includes iostream
using namespace asu;
#define TEST(cond) std::cout << ((cond)? "\e[1;32m1\e[m" : "\e[1;31m0\e[m") 
int main()
{
    {
        CMatrix a("[8.9 7.3 4.8 2.4; "
                   "2.3 6.5 8.9 1.2; "
                   "4.9 3.8 7.2 7.5; "
                   "9.8 3.4 7.5 8.9]");
        CMatrix ae(4,4,   8.9,  7.3,  4.8,  2.4,
                          2.3,  6.5,  8.9,  1.2,
                          4.9,  3.8,  7.2,  7.5,
                          9.8,  3.4,  7.5,  8.9);
        TEST(a == ae);
        
        CMatrix b("[1.2 5.7 4.2 1.4; "
                   "6.3 2.5 8.1 3.1; "
                   "6.4 2.8 7.1 8.1; "
                   "3.2 5.1 7.2 6.2]");
        CMatrix be(4,4,   1.2,  5.7,  4.2,  1.4,
                          6.3,  2.5,  8.1,  3.1,
                          6.4,  2.8,  7.1,  8.1,
                          3.2,  5.1,  7.2,  6.2);
        TEST(b == be);
        
        CMatrix c = add(a, b);
        CMatrix ce(4,4,  10.1, 13.0,  9.0,  3.8,
                          8.6,  9.0, 17.0,  4.3,
                         11.3,  6.6, 14.3, 15.6,
                         13.0,  8.5, 14.7, 15.1);
        TEST(c == ce);
        
        CMatrix d = sub(a, b);
        CMatrix de(4,4,  7.7,  1.6,  0.6,  1.0,
                        -4.0,  4.0,  0.8, -1.9,
                        -1.5,  1.0,  0.1, -0.6,
                         6.6, -1.7,  0.3,  2.7);
        TEST(d == de);

        CMatrix e = mul(a, b);
        CMatrix ee(4,4,  95.07,  94.66, 147.87,  88.85,
                        104.51,  60.40, 134.14, 102.90,
                         99.90,  95.84, 156.48, 123.46,
                        109.66, 130.75, 186.03, 140.19);
        TEST(e == ee);

        CMatrix f = div(a, b);
        CMatrix fe(4,4,  3.684326, -0.142503,  2.961259, -4.242338,
                         0.154969,  0.935297, -1.256777,  1.332826,
                        -0.072385, -0.023231,  0.528432,  0.547267,
                         1.070125, -0.075696,  2.276033, -1.741836);
        TEST(f == fe);

        CMatrix g = adiv(1, a);
        CMatrix ge(4,4,   0.11236, 0.13699, 0.20833, 0.41667,
                          0.43478, 0.15385, 0.11236, 0.83333,
                          0.20408, 0.26316, 0.13889, 0.13333,
                          0.10204, 0.29412, 0.13333, 0.11236);
        TEST(g == ge);

        CMatrix h = c.getTranspose();
        CMatrix he(4,4,  10.1,  8.6, 11.3, 13.0,
                         13.0,  9.0,  6.6,  8.5,
                          9.0, 17.0, 14.3, 14.7,
                          3.8,  4.3, 15.6, 15.1);
        TEST(h == he);
        std::cout << std::endl;
    }{
        CMatrix a("[1.4 2.2 3.2;"
                   "4.4 5.4 6.4;"
                   "3.3 4.2 2.2]");
        CMatrix ae(3,3,  1.4, 2.2, 3.2,
                         4.4, 5.4, 6.4,
                         3.3, 4.2, 2.2);
        TEST(a == ae);

        CMatrix b("[1.5 4.1 5.4;"
                   "3.1 4.2 1.2;"
                   "3.2 4.3 2.2]");
        CMatrix be(3,3,  1.5, 4.1, 5.4,
                         3.1, 4.2, 1.2,
                         3.2, 4.3, 2.2);
        TEST(b == be);

        CMatrix c = add(a, b);
        CMatrix ce(3,3,  2.9, 6.3, 8.6,
                         7.5, 9.6, 7.6,
                         6.5, 8.5, 4.4);
        TEST(c == ce);

        CMatrix d = sub(a, b);
        CMatrix de(3,3, -0.1, -1.9, -2.2,
                         1.3,  1.2,  5.2,
                         0.1, -0.1,  0.0);
        TEST(d == de);

        CMatrix e = mul(a, b);
        CMatrix ee(3,3,  19.16, 28.74, 17.24,
                         43.82, 68.24, 44.32,
                         25.01, 40.63, 27.70);
        TEST(e == ee);

        CMatrix f = div(a, b);
        CMatrix fe(3,3,  0.17872, -1.56426,  1.86910,
                        -0.17274, -4.43455,  5.75194,
                        -0.10550, -0.42110,  1.48864);
        TEST(f == fe);

        CMatrix g = a.getTranspose();
        CMatrix ge(3,3,  1.4,  4.4,  3.3,
                         2.2,  5.4,  4.2,
                         3.2,  6.4,  2.2);
        TEST(g == ge);
        std::cout << std::endl;
    }
}
